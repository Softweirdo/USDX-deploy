import{aW as m}from"./Staking-CGnaki_m.js";import{ah as a}from"./index-MbYplNpb.js";import{g as r}from"./allowance-BMOeKVp_.js";import{d as o}from"./decimals-GBaZSkjm.js";import"./TypedData-BuuSBCWf.js";import"./Address-D5mKAIhp.js";import"./arweave-CAGvOb64.js";const s="0x06fdde03",i=[],d=[{type:"string"}];async function y(c){return r({contract:c.contract,method:[s,i,d],params:[]})}async function h(c){return a(()=>y(c),{cacheKey:`${c.contract.chain.id}:${c.contract.address}:name`,cacheTime:Number.POSITIVE_INFINITY})}const u="0x95d89b41",T=[],N=[{type:"string"}];async function l(c){return r({contract:c.contract,method:[u,T,N],params:[]})}async function I(c){return a(()=>l(c),{cacheKey:`${c.contract.chain.id}:${c.contract.address}:symbol`,cacheTime:Number.POSITIVE_INFINITY})}async function P(c){if(m(c.contract.address))return{name:"Ether",symbol:"ETH",decimals:18,...c.contract.chain.nativeCurrency};try{const[t,e,n]=await Promise.all([h(c).catch(()=>""),I(c),o(c)]);return{name:t,symbol:e,decimals:n}}catch{throw new Error("Invalid currency token")}}export{P as getCurrencyMetadata};
